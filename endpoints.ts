/*
 * This file has been generated by flow2code
 * See: https://flow.liwe.org
 */

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	// endpoints function
	delete_tag_admin_module_del, delete_tag_bind_del, get_tag_bind_list, get_tag_list, patch_tag_admin_fields,
	patch_tag_admin_update, post_tag_admin_add, post_tag_admin_list, post_tag_admin_module_add, post_tag_bind_add,
	// functions
	tag_db_init, tag_del_obj, tag_obj,
} from './methods';

import {
	Tag, TagBind, TagBindKeys, TagKeys,
} from './types';

/*=== f2c_start __header ===*/

/*=== f2c_end __header ===*/

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - tag " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "tag", l ) );
	tag_db_init ( liwe );

	app.post ( '/api/tag/admin/add', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { name, visible, ___errors } = typed_dict( req.body, [
			{ name: "name", type: "string", required: true },
			{ name: "visible", type: "boolean" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_tag_admin_add ( req, name, visible, ( err: ILError, tag: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tag } );
		} );
	} );

	app.post ( '/api/tag/admin/list', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		

		post_tag_admin_list ( req, ( err: ILError, tags: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tags } );
		} );
	} );

	app.patch ( '/api/tag/admin/update', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, name, visible, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "name", type: "string" },
			{ name: "visible", type: "boolean" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_tag_admin_update ( req, id, name, visible, ( err: ILError, tag: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tag } );
		} );
	} );

	app.patch ( '/api/tag/admin/fields', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, data, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "data", type: "any", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		patch_tag_admin_fields ( req, id, data, ( err: ILError, tag: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tag } );
		} );
	} );

	app.post ( '/api/tag/admin/module/add', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, module, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "module", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_tag_admin_module_add ( req, id, module, ( err: ILError, tag: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tag } );
		} );
	} );

	app.delete ( '/api/tag/admin/module/del', perms( [ "tag.editor" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, module, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true },
			{ name: "module", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_tag_admin_module_del ( req, id, module, ( err: ILError, tag: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tag } );
		} );
	} );

	app.get ( '/api/tag/list', ( req: ILRequest, res: ILResponse ) => {
		const { module, ___errors } = typed_dict( req.query as any, [
			{ name: "module", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_tag_list ( req, module, ( err: ILError, tags: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tags } );
		} );
	} );

	app.post ( '/api/tag/bind/add', ( req: ILRequest, res: ILResponse ) => {
		const { id_tag, id_obj, module, ___errors } = typed_dict( req.body, [
			{ name: "id_tag", type: "string", required: true },
			{ name: "id_obj", type: "string", required: true },
			{ name: "module", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		post_tag_bind_add ( req, id_tag, id_obj, module, ( err: ILError, OK: boolean ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { OK } );
		} );
	} );

	app.delete ( '/api/tag/bind/del', ( req: ILRequest, res: ILResponse ) => {
		const { id, id_tag, id_obj, module, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string" },
			{ name: "id_tag", type: "string" },
			{ name: "id_obj", type: "string" },
			{ name: "module", type: "string" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_tag_bind_del ( req, id, id_tag, id_obj, module, ( err: ILError, OK: boolean ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { OK } );
		} );
	} );

	app.get ( '/api/tag/bind/list', ( req: ILRequest, res: ILResponse ) => {
		const { id_obj, module, ___errors } = typed_dict( req.query as any, [
			{ name: "id_obj", type: "string", required: true },
			{ name: "module", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_tag_bind_list ( req, id_obj, module, ( err: ILError, tags: Tag ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { tags } );
		} );
	} );

};
